{"version":3,"sources":["GameInfo.js","Board.js","App.js","index.js"],"names":["useStyles","makeStyles","cardInfo","width","float","GameInfo","startNewGame","winner","turn","classes","Box","sx","margin","Button","variant","onClick","style","Card","bgcolor","className","Typography","align","marginRight","board","height","borderRadius","item","paddingTop","Board","useState","boardValues","setBoard","setTurn","setWinner","checkWinner","lines","i","length","a","b","c","Container","maxWidth","Grid","container","spacing","map","value","index","xs","setValue","noWrap","theme","createTheme","palette","primary","main","secondary","App","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c60e8f14.chunk.js","sourcesContent":["import Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport Typography from '@mui/material/Typography';\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles=makeStyles({\r\n  cardInfo:{\r\n   width:\"29%\",\r\n   float:\"right\"\r\n  }\r\n})\r\n\r\nfunction GameInfo({startNewGame, winner, turn}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', margin:'25px auto'}}>\r\n        <Button variant=\"outlined\" onClick={startNewGame} style={{float:\"left\", margin:\"0 3px 0 12px\"}}>New Game</Button>\r\n\r\n        <Card sx={{ bgcolor: 'primary.main' }}  className={classes.cardInfo} variant=\"outlined\">\r\n            <Typography align='center' variant='h4'  >Winner</Typography>\r\n            <Typography align='center' variant='body2' >{winner != null ? `${winner} won the game` : 'no winner yet'}</Typography>\r\n        </Card>\r\n        <Card sx={{ bgcolor: 'primary.main' }}  className={classes.cardInfo}  style={{ marginRight:\"12px\"}} variant=\"outlined\">\r\n          <Typography align='center' variant='h4'  >Game turn</Typography>\r\n          {winner === null && <Typography align='center' variant='body2'  >It's {turn===1 ? 'X' : 'O'} turn</Typography>}\r\n        </Card>\r\n    </Box>\r\n \r\n  );\r\n}\r\n  \r\nexport default GameInfo;\r\n  ","import Container from '@mui/material/Container';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useState } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport GameInfo from './GameInfo'\r\n\r\n\r\nconst useStyles=makeStyles({\r\n  board:{\r\n    height: 620,\r\n    margin: '200px auto',\r\n    borderRadius: 5\r\n  },\r\n  item:{\r\n    height:120,\r\n    paddingTop: 20,\r\n    borderRadius: 5\r\n  }\r\n\r\n})\r\nfunction Board() {\r\n  const classes = useStyles();\r\n  const [boardValues, setBoard] = useState([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\r\n  const [turn, setTurn] = useState(1);\r\n  const [winner, setWinner] = useState(null);\r\n\r\n  //update the boardvalue array if the user selection is valid and change the turn\r\n  const setValue = (index, turn) =>{\r\n      if(boardValues[index] === ' ' && turn === 1){\r\n        boardValues[index]='X';\r\n        setTurn(0);\r\n        checkWinner();\r\n      }else if(boardValues[index] === ' ' && turn === 0){\r\n        boardValues[index]='O';\r\n        setTurn(1);\r\n        checkWinner();\r\n      }\r\n  }\r\n  const checkWinner = () => {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];   \r\n        if ((boardValues[a]==='X' || boardValues[a]==='O') && boardValues[a] === boardValues[b] && boardValues[a] === boardValues[c]) {\r\n          setWinner(boardValues[a]);\r\n          setTurn(null)\r\n        }\r\n      }\r\n  }\r\n  \r\n  const startNewGame = ()=>{\r\n    setBoard([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\r\n    setWinner(null);\r\n    setTurn(1);\r\n  }\r\n  return (\r\n    <Container maxWidth={'sm'} sx={{ bgcolor: 'secondary.main' }}  className={classes.board}>\r\n      <Grid container  spacing={2}>\r\n          {boardValues.map((value, index)=>(\r\n            <Grid item  key={index} xs={4} onClick={()=> setValue(index, turn)}>\r\n              <Typography  sx={{ bgcolor: 'primary.main' }} variant='h1' className={classes.item} noWrap>{value}</Typography>\r\n            </Grid>\r\n          ))}\r\n          <GameInfo startNewGame={startNewGame} winner={winner} turn={turn} />\r\n      </Grid>\r\n\r\n    </Container>\r\n  );\r\n}\r\n  \r\nexport default Board;\r\n  ","import './App.css';\r\nimport Board from './Board'\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#fcde67',\r\n    },\r\n    secondary: {\r\n      main: '#272626',\r\n    },\r\n  },\r\n});\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <Board />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}